/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Card;
import io.swagger.model.Cards;
import io.swagger.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-29T17:28:16.715952712Z[GMT]")
@Validated
public interface CardsApi {

    @Operation(summary = "Check to see if card number is valid", description = "", tags={ "cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Check if credit card is valid", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/cards/validate/{card_number}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkValid(@Parameter(in = ParameterIn.PATH, description = "The card number to validate", required=true, schema=@Schema()) @PathVariable("card_number") String cardNumber);


    @Operation(summary = "Create a credit card", description = "", tags={ "cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Null response"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/cards",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCards();


    @Operation(summary = "List all credit cards", description = "", tags={ "cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A paged array of credit cards", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cards.class))),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/cards",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cards> listCreditCards( @Max(100) @Parameter(in = ParameterIn.QUERY, description = "How many items to return at one time (max 100)" ,schema=@Schema(allowableValues={ "100" }, maximum="100"
)) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Info for a specific credit card", description = "", tags={ "cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The credit card information", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/cards/{card_number}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Card> showCardByNumber(@Parameter(in = ParameterIn.PATH, description = "The card number for the card to retrieve", required=true, schema=@Schema()) @PathVariable("card_number") String cardNumber);

}

